[{"path":"/articles/learn_from_examples.html","id":"learn-from-examples","dir":"Articles","previous_headings":"","what":"Learn from Examples!","title":"Learning from Examples","text":"start, scope well project. Dashboard always best way present information. Think simple comparison: drive car, dashboard giving key information need can make decision based knowledge already (.e., already know interpret information various gauges). rather try present information, order build knowledge, creating notebook narrative explain data likely effective. can see check typical examples dashboard within package: one protection monitoring one response monitoring. prepared dummy data famous country called Ruritania rule thumb, good dashboard remain simple effective (aka 7 charts, 7 categories charts). help design process, package includes examples typical charts can assembled together Response Protection Monitoring. file structure located examples folder.","code":""},{"path":"/articles/learn_from_examples.html","id":"example-1-protection-monitoring","dir":"Articles","previous_headings":"Learn from Examples!","what":"Example 1: Protection Monitoring","title":"Learning from Examples","text":"Typically content Protection Monitoring Dashboard allows quickly identify situation basic rights order pilot activities ground. complement (replace!) -depth protection analysis based protection risk equation. include: Exposure: Vulnerable Populations: Treemap displaying percentage different vulnerable populations (e.g., children, women, elderly, disabled) affected protection concerns. Thread: Incident Types Frequency: Line chart illustrating trend frequency different types protection incidents (e.g., violence, exploitation, discrimination) time, allowing identification spikes patterns. Coping: Response Coverage: Donut chart showcasing coverage reach protection interventions different implementing organizations sectors. Compliance Protection Standards: Radar chart comparing adherence different protection standards (e.g., human rights principles, international humanitarian law) various implementing actors sectors. Protection Advocacy Challenges: Gantt chart depicting timeline identified advocacy status efforts address , allowing tracking progress resolution. Key Performance Indicators (KPIs): Highlighted numbers specific KPIs related protection response (e.g., number cases resolved, number survivors accessing support services). Geographic Distribution: Choropleth map presenting spatial distribution protection incidents, vulnerability, response activities, allowing visual identification hotspots areas need.","code":"graveler::example_protection()"},{"path":"/articles/learn_from_examples.html","id":"example-2-response-monitoring","dir":"Articles","previous_headings":"Learn from Examples!","what":"Example 2: Response Monitoring","title":"Learning from Examples","text":"Typically content Response Monitoring Dashboard allows ensure right activities done right. typically include: Needs Assessment Population: Population pyramid illustrating demographic composition affected population (e.g., age, gender) including specific needs inform targeted response planning. Resources Allocation: Heatmap representing allocation resources (e.g., funding, personnel, supplies) response activities, allowing visual identification areas high low response coverage. Key Performance Indicators (KPIs): Gauge chart indicating achievement predetermined targets benchmarks response activities. Funding Management: Staked Bar chart comparing planned versus actual resource allocations identify discrepancies gaps resource management. Coordination Partnership: Sankey diagram showing collaboration partnerships among different response organizations clusters, measuring frequency coordination meetings joint planning efforts Impact Outcome: Bubble chart showcasing correlation response interventions key outcomes impact indicators (e.g., improved health indicators, increased access education). Alert: Area chart providing real-time updates key indicators, allowing immediate identification emerging trends shifts humanitarian situation (instance average assistance enrollment processing time).","code":"graveler::example_response()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edouard Legoupil. Author, maintainer. . Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Legoupil E (2025). graveler: Builds standardized, modular shiny dashboard ready dockerisation IOM style. R package version 0.75.2, https://github.com/iom/graveler.","code":"@Manual{,   title = {graveler: Builds standardized, modular shiny dashboard ready for dockerisation with IOM style},   author = {Edouard Legoupil},   year = {2025},   note = {R package version 0.75.2},   url = {https://github.com/iom/graveler}, }"},{"path":"/index.html","id":"graveler","dir":"","previous_headings":"","what":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"Build standardized, branded, modular dashboards deploy Docker Images Azure","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"{graveler} fork Rstudio Project Template wrapper {golem}, {shinyDashboard}, {fusen}, {iomshiny} packages. high level, {golem} turns shiny dashboards package framework allows build deploy almost exactly R package. allows better documentation, testing, robustness, etc. {graveler} abstracts away technical side set defaults development workflow IOM dashboards. shall able create initial working dashboard minutes!","code":""},{"path":"/index.html","id":"dashboard-in-shiny","dir":"","previous_headings":"","what":"Dashboard in Shiny","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"Developing dashboards shiny, rather “point click” software, requires familiarity R programming also comes numerous advantages: Customizability within standards: Shiny offers high level flexibility customization, allowing design interactive dashboards tailored visualizations, layouts, user interfaces (including instance humanitarian icons). comes also amazing plotting capacity leveraging ggplot2. time, soon standard css ({iomshiny}) used, look feel remain fully consistent. Seamless Integration R: Shiny allows leverage power flexibility R language extensive ecosystem packages data analysis, visualization, statistical modeling. Responsiveness mobile devices: Shiny Dashboard built per default bootstrap, allowing User Interface Responsiveness, meaning resulting product legible smartphones senior managers hurry. Advanced Analytics: R’s extensive statistical capabilities, Shiny enables integration complex statistical models advanced analytics directly dashboard. Reproducibility Transparency: Since Shiny dashboards built using R code, inherently reproducible transparent, making easier share validate analysis methods results. Publication Maintenance: IOM can deploy docker images within Azure infrastructure, ready leveraged. even ways keep dashboard behind authentication need arise. Shiny Dashboard based scripts, easier maintain monitor time, can keep version control github. Open-Source Community: Shiny benefits large active open-source community, provides wealth resources, packages, support.","code":""},{"path":"/index.html","id":"why-bother-with-graveler","dir":"","previous_headings":"","what":"Why Bother with {graveler}?","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"development team grows larger, important standardize code avoid dreaded event handed project coded differently usual workflow either spend hours refactoring / rebuilding scratch. Additionally, {shiny} can complicated spin times developers familiar syntax. {graveler} allows create standard, scale-able, documented code can focus actual dashboard element creation instead spending time getting various back-end pieces talk . Note package like {shinyWidgets} shiny element packages. dashboard skeleton creator allows team start page (might say fluidPage) dashboards feel, layout, backend creation.","code":""},{"path":[]},{"path":"/index.html","id":"package-installation","dir":"","previous_headings":"Get Started","what":"Package Installation","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"windows, need install Rtools top R Rstudio can paste following install package: package installed Rstudio, follow steps :","code":"install.packages(\"pak\") pak::pkg_install(\"iom/graveler\")"},{"path":"/index.html","id":"project-creation","dir":"","previous_headings":"Get Started","what":"Project Creation","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"create {graveler} dashboard: Click New Project Select New Directory Select using IOM Shiny Dashboard Template  Fill form, ensuring Directory Name Pkg Name match written camelCase (failing break dashboard immediately)  Make sure set proper sub directory within computer file system Click Create Project make new directory machine following structure:","code":".    ├── app.R # script used to launch the app for deployment    ├── .Rbuildignore # ignores systems files not needed for builds    ├── .git # ignores files for git version control    ├── _pkgdown.yml # template for documentation website    ├── .github # folders with issue templates for bug report & feature request    ├── DESCRIPTION # where libraries are installed for your package    ├── dev/    │   ├── 01_dev.R # package dependencies and system file creations    │   └──  run_dev.R # build, document, and run the shiny dashboard    ├── inst/    │   └── app/    │       └── www/ # standard shiny extra file subfolder    │           └── favicon.ico # IOM favicon    ├── man/ # .Rd system files for functions generated by R    └── R/        ├── app_server.R # callModules server side here        ├── app_ui.R # combines header, sidebar, body files        ├── body.R # organizes UI layouts - call in modules ui side there        ├── globals.R # specific environment variables for the project        ├── header.R # display name and other shinydashboardPlus features        ├── mod_home.R  # first module for your splash page        ├── run_app.R # main function to start the shiny app        └── sidebar.R # tabs and their icons - call in modules menu there"},{"path":"/index.html","id":"initialization-of-the-app","dir":"","previous_headings":"Get Started","what":"Initialization of the app","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"load new project, two files open: 01_dev.R run_dev.","code":""},{"path":"/index.html","id":"id_01_dev","dir":"","previous_headings":"Get Started > Initialization of the app","what":"01_dev","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"first file sets dependencies deployment. check DESCRIPTION file, imports initialization. run file, attaches libraries package server publish can know install run. include libraries need run dashboard, golem.config system file, app.R file deploy RStudio Connect, manifest file use git backed content within RStudio Connect. can adjust fit workflow. end file, navigate run_dev.R file.","code":""},{"path":"/index.html","id":"run_dev","dir":"","previous_headings":"Get Started > Initialization of the app","what":"run_dev","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"dependencies system files place, can run code run_dev.R file.  successfully run load (currently empty) shiny dashboard! Note: run line run_dev.R, prompted console create golem-config.yml file. Enter 1 prompted create necessary backend files required {golem} run dashboard package. span minute already made reproducible fully functional framework!  familiar building R packages, file equivalent running Install Restart option: creates NAMESPACE, documents .Rd files, temporarily installs locally.","code":""},{"path":"/index.html","id":"back-office","dir":"","previous_headings":"Get Started","what":"Back office","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"build robust app, key separate back-office (basically R package act utilities functions) user interaction management (ShinyApp).","code":""},{"path":"/index.html","id":"set-up-utilities-functions-for-your-application","dir":"","previous_headings":"Get Started > Back office","what":"Set up utilities functions for your application","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"{golem} suggests functionalize code creating dedicated functions works independently interface. utilities include: connecting API using token (stored environment variables) Data tidying cleaning Building chart Using {graveler} fork, done creation dedicated {fusen} notebook prefix function fct_ distinguish modules comes fct_. Using {fusen} allows quick peer review, robust documentation easy debugging (can always understand issue arise interface functions ). create [graveler] project, default {fusen} notebook created \"dev/function_documentation.Rmd\" comes series default function key dashboard charts. need add new library, simply make sure systematically reference within @import @importFrom, within function documentation. make sure attachment::att_amend_desc() library referenced NAMESPACE goal get : 0 errors ✔ | 0 warnings ✔ | 0 notes ✔ Please check examples better understand works.","code":""},{"path":"/index.html","id":"token-and-authentication","dir":"","previous_headings":"Get Started > Back office","what":"Token and authentication","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"evident data protection reason, key include user name, password authentication. right way use environment variables. case instance pull data ActivityInfo using dedicaed R package","code":"# set up token as environement variable - aka save within your hidden file .Renviron token <- \"activityinfotoken..\" print(Sys.setenv(ACTIVITYINFOTOKEN = token)) Sys.getenv(\"ACTIVITYINFOTOKEN\") rm(token)  ## Now we can login using this environement variable activityinfo::activityInfoToken(Sys.getenv(\"ACTIVITYINFOTOKEN\"),                                 prompt = FALSE)"},{"path":"/index.html","id":"modularization","dir":"","previous_headings":"Get Started","what":"Modularization","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"unfamiliar, modularization splits dashboard n files n number sidebar tabs / modules want make UI server namespaces. allows independently load module’s code (one breaks, rest still work) reuse IDs UI elements (can give different plotOuputs generic name like “chart” across two different modules). default template comes initial home module first tab home page included.","code":""},{"path":"/index.html","id":"creation","dir":"","previous_headings":"Get Started > Modularization","what":"Creation","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"inside graveler project, running function level_up(name = \"foo\") add new module - called \"foo\" - dashboard :  place UI server code mod_ file, reflect away repeatable data manipulation plotting functions created {fusen} notebook. general, helps keep module code short tidy, allows put documentation functions just like package.","code":".    ├── R/    │   ├── app_server.R    │   ├── app_ui.R    │   ├── body.R    │   ├── header.R    │   ├── mod_foo.R                    <<<<< HERE    │   ├── mod_home.R    │   ├── run_app.R    │   └── sidebar.R    ├── man/    ├── inst/    ├── dev/    ├── DESCRIPTION    ├── foo.Rproj    ├── .Rbuildignore    └── NAMESPACE"},{"path":"/index.html","id":"connection-between-modules-and-dashboard","dir":"","previous_headings":"Get Started > Modularization","what":"Connection between modules and dashboard","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"level_up might create module, still need tell dashboard include run module. , three lines bottom copy paste appropriate files: body.R, app_server.R, sidebar.R (un commented, course). body sidebar lines need separated commas multiple modules, app_server individual lines like :  done, modules appear left. left insert actual dashboard elements.","code":""},{"path":"/index.html","id":"communication-between-modules","dir":"","previous_headings":"Get Started > Modularization","what":"Communication between modules","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"Typically communication modules required want use filters across modules. imply set specific object reactivalues (called per default AppReactiveValue) consumed modules.","code":""},{"path":"/index.html","id":"customization","dir":"","previous_headings":"Get Started","what":"Customization","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"implementation brand within plots done iomthemes.","code":""},{"path":"/index.html","id":"deployment","dir":"","previous_headings":"","what":"Deployment","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"run_dev.R file runs dashboard error free able build docker image, can go deployment. Get touch IOM Data, Analytics & AI unit app published Azure.","code":""},{"path":"/index.html","id":"good-practices-when-publishing","dir":"","previous_headings":"Deployment","what":"Good practices when publishing","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"Beware token password - see usage environment variable Favor publication github much possible. Build publish package documentation github pkgdown::build_site() Share publication access rights colleagues ’s back plan update app needed application published Posit Connect server, document name github repo app within Rstudio Connect metadata use specific URL disseminating app hesitate reach issue peer review! :)","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"Please see tutorials package vignette.","code":""},{"path":"/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Builds standardized, modular shiny dashboard ready for dockerisation with IOM style","text":"Thanks Alan Carlson initial idea package built . Thanks ThinkR packages framework built .","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 graveler authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/example_protection.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a small graveler example for protection monitoring dashboard — example_protection","title":"Launch a small graveler example for protection monitoring dashboard — example_protection","text":"illustration graveler applied  humanitarian protection             monitoring dashboard","code":""},{"path":"/reference/example_protection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a small graveler example for protection monitoring dashboard — example_protection","text":"","code":"example_protection()"},{"path":"/reference/example_protection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch a small graveler example for protection monitoring dashboard — example_protection","text":"","code":"if (interactive()) {   example_protection()  }"},{"path":"/reference/example_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a small graveler example for response tracking dashboard — example_response","title":"Launch a small graveler example for response tracking dashboard — example_response","text":"illustration graveler applied humanitarian response             tracking dashboard","code":""},{"path":"/reference/example_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a small graveler example for response tracking dashboard — example_response","text":"","code":"example_response()"},{"path":"/reference/example_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch a small graveler example for response tracking dashboard — example_response","text":"","code":"if (interactive()) {   example_response()  }"},{"path":"/reference/graveler-package.html","id":null,"dir":"Reference","previous_headings":"","what":"graveler: Builds standardized, modular shiny dashboard with a UNHCR style — graveler-package","title":"graveler: Builds standardized, modular shiny dashboard with a UNHCR style — graveler-package","text":"Wrapper golem automates dashboard file generation.","code":""},{"path":[]},{"path":"/reference/graveler_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Golem dashboard backend — graveler_dashboard","title":"Golem dashboard backend — graveler_dashboard","text":"Creates golem directory header template info","code":""},{"path":"/reference/graveler_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Golem dashboard backend — graveler_dashboard","text":"","code":"graveler_dashboard(path, ...)"},{"path":"/reference/graveler_dashboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Golem dashboard backend — graveler_dashboard","text":"path path file ... parameters","code":""},{"path":"/reference/level_up.html","id":null,"dir":"Reference","previous_headings":"","what":"Graveler Module — level_up","title":"Graveler Module — level_up","text":"Creates module specified name","code":""},{"path":"/reference/level_up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graveler Module — level_up","text":"","code":"level_up(name, pkg = get_graveler_wd(), open = TRUE, dir_create = TRUE)"},{"path":"/reference/level_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graveler Module — level_up","text":"name name pkg package name open boolean dir_create boolean","code":""},{"path":"/news/index.html","id":"graveler-0752","dir":"Changelog","previous_headings":"","what":"graveler 0.75.2","title":"graveler 0.75.2","text":"Added preloaded font Added preloaded github issue template Added preloaded license Added connection git Added preloaded styling {iomshiny}","code":""},{"path":"/news/index.html","id":"graveler-0751","dir":"Changelog","previous_headings":"","what":"graveler 0.75.1","title":"graveler 0.75.1","text":"Initial Fork https://github.com/ghcarlalan/graveler","code":""}]
